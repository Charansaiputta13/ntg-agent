﻿@using NTG.Agent.Shared.Dtos.Chats
@using NTG.Agent.Shared.Dtos.Enums
@using NTG.Agent.Shared.Dtos.SharedConversations
@using NTG.Agent.WebClient.Client.Components.Shared
@inject ChatClient ChatClient
@inject NavigationManager Navigation
@inject ConversationClient ConversationClient
@inject SharedConversationClient SharedConversationClient
@inject ConversationState ConversationState
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (unauthorized)
{
    <div class="d-flex flex-column justify-content-center align-items-center" style="height: 70vh;">
        <h2 class="mb-4">Unauthorized</h2>
        <p class="text-muted">You are not authorized to view this conversation.</p>
        <button class="btn btn-primary" @onclick="@GoHome">Go to Home</button>
    </div>
}
else if (ConversationId.HasValue)
{
    @if (isAuthenticated)
    {
        <button id="share-conversation-btn" class="share-button" @onclick="() => ShowShareModal()" title="Share conversation">
            <i class="bi bi-share"></i>
        </button>
    }
    <div class="chat-container">
        @foreach (var item in chatHistory)
        {
            if (item.IsSystem)
            {
                <div class="p-2 w-100">
                    <EnhancedMarkdown Value="@item.Message" @ref="MarkdownSetValue"
                    CssClass="p-2 rounded rounded-4 border chat-response"></EnhancedMarkdown>
                    <div class="chat-actions mt-2 ms-2">
                        <button class="btn btn-sm btn-outline-secondary me-2" @onclick="@(() => ToggleLike(item))" title="Like">
                            <i
                            class="bi @(item.Reaction == ReactionType.Like ? "bi-hand-thumbs-up-fill" : "bi-hand-thumbs-up")"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary me-2" @onclick="@(() => ToggleDislike(item))"
                        title="Dislike">
                            <i
                            class="bi @(item.Reaction == ReactionType.Dislike ? "bi-hand-thumbs-down-fill" : "bi-hand-thumbs-down")"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary me-2" @onclick="@(() => ToggleComment(item))" title="Comment">
                            <i class="bi bi-chat-dots"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => ShowShareMessageModal(item))" title="Share this message">
                            <i class="bi bi-share"></i>
                        </button>
                    </div>
                    @if (showCommentFor == item.Id)
                    {
                        <div class="comment-section mt-2 ms-2">
                            <div class="input-group input-group-sm">
                                <input type="text" class="form-control" placeholder="Add a comment..." @bind="currentComment" />
                                <button class="btn btn-outline-primary" type="button" @onclick="@(() => SaveComment(item))">
                                    <i class="bi bi-check"></i>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-end p-2 w-100">
                    @if (!string.IsNullOrEmpty(item.ImageBase64))
                    {
                        <img src="data:@item.ImageContentType;base64,@item.ImageBase64"
                             class="img-fluid rounded shadow-sm"
                             style="max-width: 200px;" />
                    }
                    @if (!string.IsNullOrEmpty(item.Message))
                    {
                        <span class="text-white bg-primary p-2 rounded rounded-4">
                            @item.Message
                        </span>
                    }
                </div>
            }
        }
    </div>
    <div class="form-group row">
        <div class="col-8 col-md-6 col-sm-8 m-auto fixed-bottom" id="inputChatContainer">
            <div class="input-group mb-3">
                <label for="fileInput" class="btn btn-outline-secondary border-0 bg-transparent d-flex align-items-center px-3">
                    <i class="bi bi-paperclip fs-5"></i>
                </label>
                <InputFile id="fileInput" class="d-none" OnChange="OnFileSelected" accept="image/*" />
                <input type="text" id="userInput" class="form-control rounded rounded-4" @bind="userInput"
                @onkeydown="@Enter" @bind:event="oninput" autocomplete="off" spellcheck="false" autocorrect="off"
                autocapitalize="off" placeholder="Type your message..." />
                <div class="input-group-append">
                    <SpeechToText Language="@Language" OnTranscription="HandleTranscription" />
                    <button class="btn" @onclick="SendMessage" type="button" aria-label="Send message" title="Send message">
                        <i class="bi bi-send fs-6"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="d-flex flex-column justify-content-center align-items-center" style="height: 70vh;">
        <h2 class="mb-4">What can I help with?</h2>
        <div class="form-group w-100">
            <div class="col-8 col-md-6 col-sm-8 mx-auto" id="inputChatContainer">
                <div class="input-group mb-3">
                    <input type="text" id="userInput" class="form-control rounded rounded-4" @bind="userInput"
                    @onkeydown="@Enter" @bind:event="oninput" autocomplete="off" spellcheck="false" autocorrect="off"
                    autocapitalize="off" placeholder="Ask anything" />
                    <div class="input-group-append">
                        <SpeechToText Language="@Language" OnTranscription="HandleTranscription" />
                        <button class="btn" @onclick="SendMessage" type="button" aria-label="Send message"
                        title="Send message">
                            <i class="bi bi-send fs-6"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<ShareConversationModal IsVisible="showShareModal" 
                        ConversationId="ConversationId" 
                        ConversationName=""
                        ChatId="shareChatId"
                        OnClose="CloseShareModal" 
                        OnSharedConversationChanged="HandleSharedConversationChanged" />

@code {

    [Parameter]
    public Guid? ConversationId { get; set; }

    [Parameter]
    public string? Language { get; set; } = "en-US";

    private string userInput = string.Empty;
    private List<ChatMessageItem> chatHistory = new List<ChatMessageItem>();
    private EnhancedMarkdown? MarkdownSetValue { get; set; }
    private string currentSessionId = string.Empty;
    private bool isAuthenticated = false;
    private bool unauthorized = false;
    private bool showShareModal = false;
    private Guid? shareChatId = null;
    private Guid? showCommentFor = null;
    private string currentComment = string.Empty;

    private string? attachedImageBase64;
    private string? attachedImageContentType;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (ConversationId.HasValue)
        {
            if (!isAuthenticated)
            {
                currentSessionId = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "CurrentSessionId");
            }

            try
            {
                var chatMessages = await ConversationClient.GetConversationMessagesAsync(
                    ConversationId.Value, currentSessionId);

                foreach (var item in chatMessages)
                {
                    chatHistory.Add(new ChatMessageItem
                    {
                        Id = item.Id,
                        IsSystem = item.Role == (int)ChatRole.Assistant,
                        Message = item.Content,
                        Reaction = item.Reaction,
                        UserComment = item.UserComment
                    });
                }
                StateHasChanged();
            }
            catch (UnauthorizedAccessException)
            {
                unauthorized = true;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(2000);
            await JSRuntime.InvokeVoidAsync("beautifyCodeBlocks");
            await JSRuntime.InvokeVoidAsync("highlightCodeBlocks");
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
        var buffer = new byte[file.Size];
        await stream.ReadAsync(buffer);

        attachedImageBase64 = Convert.ToBase64String(buffer);
        attachedImageContentType = file.ContentType;

        // Show inline preview in chat
        chatHistory.Add(new ChatMessageItem
            {
                IsSystem = false,
                Message = string.Empty, // no text needed
                ImageBase64 = attachedImageBase64,
                ImageContentType = attachedImageContentType
            });

        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput) && string.IsNullOrEmpty(attachedImageBase64))
        {
            return;
        }

        var newConversation = false;
        if (!ConversationId.HasValue)
        {
            if (!isAuthenticated)
            {
                currentSessionId = Guid.NewGuid().ToString();
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "CurrentSessionId", currentSessionId);
            }
            var conversation = await ConversationClient.Create(currentSessionId);
            ConversationId = conversation.Id;
            newConversation = true;
        }

        // Add user input to history
        var query = userInput.Trim();
        chatHistory.Add(new ChatMessageItem { IsSystem = false, Message = query });


        // Agent "thinking"
        var response = new ChatMessageItem { IsSystem = true, Message = "One moment, the agent is thinking ..." };
        chatHistory.Add(response);
        userInput = string.Empty;
        StateHasChanged();

        // 🚀 Send text + image to backend
        var request = new PromptRequest(query, ConversationId.Value,
            currentSessionId, attachedImageBase64, attachedImageContentType);

        var result = await ChatClient.InvokeStreamAsync(request);
        response.Message = string.Empty;
        await foreach (var item in result)
        {
            response.Message += item.Content;
            await Task.Delay(1);

            await MarkdownSetValue!.SetValue(response.Message);
        }

        // Reset after send
        attachedImageBase64 = null;
        attachedImageContentType = null;

        if (newConversation)
        {
            ConversationState.NotifyConversationAdded();
            Navigation.NavigateTo($"/c/{ConversationId}", false);
        }
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SendMessage();
        }
    }

    private void HandleTranscription(string result)
    {
        userInput = result;
        StateHasChanged();
    }

    private void GoHome()
    {
        Navigation.NavigateTo("/", true);
    }

    // Share Modal methods
    private async Task ShowShareModal()
    {
        if (ConversationId.HasValue && isAuthenticated)
        {
            shareChatId = null;
            showShareModal = true;
            await JSRuntime.InvokeVoidAsync("hideInputChatContainer");
        }
    }

    private async Task ShowShareMessageModal(ChatMessageItem message)
    {
        if (ConversationId.HasValue && isAuthenticated)
        {
            shareChatId = message.Id;
            showShareModal = true;
            await JSRuntime.InvokeVoidAsync("hideInputChatContainer");
        }
    }
    
    private async Task ToggleLike(ChatMessageItem message)
    {
        var newReaction = message.Reaction == ReactionType.Like ? ReactionType.None : ReactionType.Like;
        var success = await ConversationClient.UpdateMessageReactionAsync(ConversationId!.Value, message.Id, newReaction);
        if (success)
        {
            message.Reaction = newReaction;
            StateHasChanged();
        }
    }

    private void CloseShareModal()
    {
        showShareModal = false;
        shareChatId = null; // Reset chatId when closing modal
        JSRuntime.InvokeVoidAsync("showInputChatContainer");
        StateHasChanged();
    }

    private void HandleSharedConversationChanged()
    {
        StateHasChanged();
    }
    private async Task ToggleDislike(ChatMessageItem message)
    {
        var newReaction = message.Reaction == ReactionType.Dislike ? ReactionType.None : ReactionType.Dislike;
        var success = await ConversationClient.UpdateMessageReactionAsync(ConversationId!.Value, message.Id, newReaction);
        if (success)
        {
            message.Reaction = newReaction;
            StateHasChanged();
        }
    }

    private void ToggleComment(ChatMessageItem message)
    {
        if (showCommentFor == message.Id)
        {
            showCommentFor = null;
            currentComment = string.Empty;
        }
        else
        {
            showCommentFor = message.Id;
            currentComment = message.UserComment;
        }
        StateHasChanged();
    }

    private async Task SaveComment(ChatMessageItem message)
    {
        var success = await ConversationClient.UpdateMessageCommentAsync(ConversationId!.Value, message.Id, currentComment);
        if (success)
        {
            message.UserComment = currentComment;
            showCommentFor = null;
            currentComment = string.Empty;
            StateHasChanged();
        }
    }
}
